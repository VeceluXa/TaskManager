plugins {
    id 'com.android.application'
    id "org.sonarqube" version "3.3"
}

apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.8.3'
}

sonarqube {
    properties {
        property "sonar.projectKey", "VeceluXa_TaskManager"
        property "sonar.organization", "151004-java-android"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", fileTree(include: ['*.xml'], dir: "$buildDir/reports/jacoco/jacocoUnitTestReport").collect()
    }
}



android {
    compileSdkVersion 31
    buildToolsVersion "31.0.0"

    defaultConfig {
        applicationId "com.bsuir.taskmanager"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            testCoverageEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        unitTests.all {
            finalizedBy jacocoUnitTestReport
        }
    }

    buildFeatures {
        viewBinding true
    }

    lintOptions {
        abortOnError false
    }

    configurations {
        javadocDeps
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'


    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'org.mockito:mockito-core:2.24.0'

    javadocDeps 'androidx.appcompat:appcompat:1.4.0'
    javadocDeps 'com.google.android.material:material:1.4.0'
    javadocDeps 'androidx.constraintlayout:constraintlayout:2.1.2'
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'copyReport']) {
    def coverageSourceDirs = [
            "src/main/java"
    ]
    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*'
    ]
    def javaClasses = fileTree(
            dir: "$buildDir/intermediates/javac/debug/classes/com/bsuir/taskmanager",
            excludes: fileFilter
    )
    classDirectories.setFrom(files([ javaClasses ]))
    additionalSourceDirs.setFrom(files(coverageSourceDirs))
    sourceDirectories.setFrom(files(coverageSourceDirs))
    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ]))
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// Task to copy debug file to jacoco dir
tasks.register('copyReport', Copy) {
    doLast {
        mkdir "$buildDir/jacoco"
    }
    from "$buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
    into "$buildDir/jacoco"
}

import java.nio.file.Files
import java.nio.file.Paths
import java.util.zip.ZipFile

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadocDeps
    options.memberLevel = JavadocMemberLevel.PRIVATE

    afterEvaluate {
        classpath += files(android.getBootClasspath())

        def aarDependencies = classpath.filter { it.name.endsWith('.aar') }
        classpath -= aarDependencies
        aarDependencies.each { aar ->

            def outputPath = "$buildDir/tmp/aarJar/${aar.name.replace('.aar', '.jar')}"
            classpath += files(outputPath)

            dependsOn task(name: "extract ${aar.name}").doLast {
                extractEntry(aar, 'classes.jar', outputPath)
            }
        }
    }
}

private static def extractEntry(archive, entryPath, outputPath) {
    if (!archive.exists()) {
        throw new GradleException("archive $archive not found")
    }

    def zip = new ZipFile(archive)
    zip.entries().each {
        if (it.name == entryPath) {
            def path = Paths.get(outputPath)
            if (!Files.exists(path)) {
                Files.createDirectories(path.getParent())
                Files.copy(zip.getInputStream(it), path)
            }
        }
    }
    zip.close()
}